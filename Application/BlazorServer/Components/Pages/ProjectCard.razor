@page "/projects/create"
@page "/projects/{Id}"

@using Microsoft.EntityFrameworkCore
@using TauResourceCalculator.Application.BlazorServer.Services
@using TauResourceCalculator.Domain.ResourceCalculator.Models
@using TauResourceCalculator.Infrastructure.Data

@inject ApplicationDbContext DbContext
@inject XlsxReportService xlsxReportService

<PageTitle>@this.PageTitle</PageTitle>

@if (this.project == null)
{
  <MudCard>
    <MudCardHeader>
      Project @this.Id not found
    </MudCardHeader>
  </MudCard>
}
else
{
  <MudCard>
    <MudCardContent>
      <MudForm Model="this.project" @ref="this.projectFormRef">
        <MudTextField @bind-Value="this.project.Name"
                      Typo="Typo.h5"
                      Required="true" Label="@nameof(Project.Name)"
                      Margin="Margin.Dense"
                      Variant="Variant.Text" />
        <br />
        <MudText>Спринты:</MudText>
        <MudFab Color="Color.Primary"
                Size="Size.Medium"
                StartIcon="@Icons.Material.Filled.Add"
                OnClick="@this.HandleAddSprintButtonClick" />
        <MudTable Items="@this.project.Sprints" Hover="true" Elevation="0">
          <ColGroup>
            <col />
            <col style="width: 200px;" />
            <col style="width: 200px;" />
            <col style="width: 55px;" />
          </ColGroup>
          <HeaderContent>
            <MudTh>
              <MudTableSortLabel SortBy="new Func<Sprint, object>(p => p.Name)">
                Имя
              </MudTableSortLabel>
            </MudTh>
            <MudTh>
              <MudTableSortLabel SortBy="new Func<Sprint, object>(p => p.Start)" InitialDirection="SortDirection.Ascending">
                Начало
              </MudTableSortLabel>
            </MudTh>
            <MudTh>
              <MudTableSortLabel SortBy="new Func<Sprint, object>(p => p.End)">
                Конец
              </MudTableSortLabel>
            </MudTh>
            <MudTh />
          </HeaderContent>
          <RowTemplate>
            <MudTd DataLabel="@nameof(Sprint.Name)">
              <MudLink Href="@this.GetSprintCardLink(context)">
                @context.Name
              </MudLink>
            </MudTd>
            <MudTd DataLabel="@nameof(Sprint.Start)">
              @context.Start
            </MudTd>
            <MudTd DataLabel="@nameof(Sprint.End)">
              @context.End
            </MudTd>
            <MudTd>
              <MudIconButton Icon="@Icons.Material.Filled.Delete"
                             Variant="Variant.Filled"
                             Color="Color.Error"
                             Size="Size.Small"
                             OnClick="() => this.HandleDeleteSprintButtonClick(context)" />
            </MudTd>
          </RowTemplate>
        </MudTable>
      </MudForm>
    </MudCardContent>
    <MudButton OnClick="this.HandleExportReportClick">Export Report</MudButton>
  </MudCard>
}

@code {
  private MudForm projectFormRef = null!;
  private Project? project;

  private string PageTitle => this.project?.ToString() ?? "Проект";

  [Parameter]
  public string? Id { get; set; }

  protected override async Task OnInitializedAsync()
  {
    if (this.Id is null)
    {
      this.project = new Project() { Name = "Project", Version = "42" };
      var entity = await this.DbContext.Projects.AddAsync(this.project!);
      this.Id = entity.Entity.Id.ToString();
      await this.DbContext.SaveChangesAsync();
    }
    else if (Guid.TryParse(this.Id, out var id))
    {
      this.project = await this.DbContext.Projects.Include(t => t.Sprints).FirstOrDefaultAsync(p => p.Id == id);
    }

    await base.OnInitializedAsync();
  }

  private string GetSprintCardLink(Sprint sprint)
  {
    return $"/sprints/{sprint.Id:N}";
  }

  private async Task HandleAddSprintButtonClick()
  {
    this.project?.Sprints.Add(new Sprint() { Name = "Iteration ", Project = this.project });
    await this.DbContext.SaveChangesAsync();
  }

  private async Task HandleDeleteSprintButtonClick(Sprint sprint)
  {
    this.project?.Sprints.Remove(sprint);
    await this.DbContext.SaveChangesAsync();
  }

  private async Task HandleExportReportClick()
  {
    if (this.project != null)
    {
      var report = await this.xlsxReportService.BuildReport(this.project, this.CancellationToken);
    }
  }
}
